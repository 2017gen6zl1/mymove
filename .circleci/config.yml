version: 2
jobs:
  pre_test:
    docker:
      - image: trussworks/circleci-docker-primary:25fb58d78157ba0664802478ea7195cdb1d5f9d7
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run:
          name: Install prettier
          command: npm install prettier
      - run:
          name: Install golint
          command: |
            go get -u github.com/golang/lint/golint
            echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run:
          name: Run pre-commit tests
          command: pre-commit run --all-files
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

  build_app:
    working_directory: ~/go/src/github.com/transcom/mymove
    docker:
      - image: trussworks/circleci-docker-primary:25fb58d78157ba0664802478ea7195cdb1d5f9d7
      - image: postgres:latest
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-vendor-cache-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - yarn-node-modules-cache-{{ checksum "yarn.lock" }}

      - run:
          # This is needed to use `psql` to test DB connectivity, until the app
          # itself starts making database connections.
          name: Install postgres client
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq -y install postgresql-client-9.4
      - run:
          name: Install dep
          command: |
            go get -u github.com/golang/dep/cmd/dep
            echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV

      - run: echo 'export PATH=${PATH}:~/go/bin' >> $BASH_ENV
      - run: make deps
      - run: make client_build
      - run: make client_test
      - run: make server_test
      - run: make server_build_docker
      - run:
          name: Tag and push image
          command: |
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            docker tag ppp:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:${CIRCLE_SHA1}

      - save_cache:
          key: go-vendor-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      - save_cache:
          key: yarn-node-modules-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  build_migrations:
    docker:
      - image: trussworks/circleci-docker-primary:25fb58d78157ba0664802478ea7195cdb1d5f9d7
    steps:
      - checkout
      - setup_remote_docker
      - run: make db_build_docker
      - run:
          name: Tag and push migrations image
          command: |
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            docker tag ppp-migrations:dev ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:${CIRCLE_SHA1}

  deploy_migrations:
    docker:
      - image: trussworks/circleci-docker-primary:25fb58d78157ba0664802478ea7195cdb1d5f9d7
    steps:
      - checkout
      - run:
          name: Run migration task on ECS
          command: |
            bin/ecs-run-migration-container ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app-migrations:${CIRCLE_SHA1} staging

  deploy_app:
    docker:
      - image: trussworks/circleci-docker-primary:25fb58d78157ba0664802478ea7195cdb1d5f9d7
    steps:
      - checkout
      - deploy:
          name: Deploy demo site
          command: |
            bash -c "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            ecs-deploy -c app-staging -n app -t 600 -i ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/app:${CIRCLE_SHA1}

workflows:
  version: 2
  pipeline:
    jobs:
      - pre_test
      - build_app
      - build_migrations
      - deploy_migrations:
          requires:
            - build_migrations
          filters:
            branches:
              only: master
      - deploy_app:
          requires:
            - build_app
            - deploy_migrations
          filters:
            branches:
              only: master

experimental:
  notify:
    branches:
      only:
        - master
